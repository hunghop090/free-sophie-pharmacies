@page
@using App.Core.Constants
@using Sophie.Areas.Admin.ShopPage

@model Sophie.Areas.Admin.ShopPage.EditCategoryModel
@{
    ViewData["Title"] = "Edit Category Page";
    ViewData["NameActivePage"] = NavigationPages.Edit_Category_Product;
}

@section Styles {
<style>
    .selected {
        background-color: #cff4d6 !important;
    }
</style>
<!-- DataTables -->
<link rel="stylesheet" href="~/lib/plugins/datatables-bs4/css/dataTables.bootstrap4.css">
<!-- Ionicons -->
<link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
<!-- SweetAlert2 -->
<link rel="stylesheet" href="~/lib/plugins/sweetalert2-theme-bootstrap-4/bootstrap-4.min.css">
<!-- Toastr -->
<link rel="stylesheet" href="~/lib/plugins/toastr/toastr.min.css">
}
@await Html.PartialAsync("~/Areas/Admin/Shared/_StatusMessage.cshtml", Model.StatusMessage)

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@ViewData["Title"]</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item"><a href="#">Product</a></li>
                    <li class="breadcrumb-item active">@ViewData["Title"]</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.Content Header -->
<!-- Main content -->
<section class="content" style="padding: 0px 0px 0px 0px !important">
    <div class="row">
        <div class="col-12">
            <!-- left column -->
            <div class="col-md-6">
            </div>
            <!--/.col (left) -->
            <!-- right column -->
            <div class="col-md-6">
            </div>
            <!--/.col (right) -->

            <form id="quickForm" role="form" asp-page-handler="Create" asp-route-categoryId="@Model.Category.CategoryId" method="post" enctype="multipart/form-data">
                <!-- CARD TABLE-->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Create new category level 2</h3>
                    </div>
                    <!-- /.card-header -->
                    <div class="card-body">

                        <div class="row">
                            <div class="col-sm-6">
                                <!-- text input -->
                                <div class="form-group" hidden>
                                    <label>SubCategoryId</label>
                                    <input type="text" class="form-control" placeholder="Enter ..." id="SubCategoryId" name="SubCategoryId" value="@Model.SubCategory?.SubCategoryId">
                                </div>
                                <div class="form-group">
                                    <label>SubType</label>
                                    @*<input type="text" class="form-control" placeholder="Enter ..." name="Type" value="@Model.Category?.Type">*@
                                    <select class="form-control" id="Type" name="Type" value="@Model.SubCategory?.Type">
                                        <option value="Actived">Actived</option>
                                        <option value="Draft">Draft</option>
                                        <option value="Trash">Trash</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>SubCategoryName</label>
                                    <input required type="text" class="form-control" placeholder="Enter ..." id="SubCategoryName" name="SubCategoryName" value="@Model.SubCategory?.SubCategoryName">
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group">
                                    <label>SubCategoryLevel</label>
                                    <input type="text" class="form-control" placeholder="Enter ..." id="SubCategoryLevel" name="SubCategoryLevel" value="@Model.SubCategory?.SubCategoryLevel" disabled>
                                </div>
                                <div class="form-group">
                                    <label>Category Image</label>
                                    <div>
                                        <div class="btn btn-default btn-file">
                                            <i class="fas fa-paperclip"></i> Attachment
                                            <input id="myFileUpload" name="Attachment" accept="image/jpeg, image/jpg, image/png" type="file">
                                        </div>
                                        <p class="help-block">Max. 32MB</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer bg-white">
                            <ul id="show-myFileUpload" class="mailbox-attachments d-flex align-items-stretch clearfix">
                                @if (Model.SubCategory?.SubCategoryIcon != null)
                                {
                                    <li>
                                        <span class="mailbox-attachment-icon has-img" style="overflow: hidden;">
                                            <img id="SubCategoryIconLabel" src="@Url.Content(Model.SubCategory?.SubCategoryIcon)" alt="Attachment">
                                        </span>
                                        <div class="mailbox-attachment-info">
                                            <a href="#" class="mailbox-attachment-name"><i class="fas fa-camera"></i>@Model.SubCategory?.SubCategoryIcon</a>
                                            <span class="mailbox-attachment-size clearfix mt-1">
                                                <a onclick="$(this).parent().parent().parent().remove()" class="btn btn-default btn-sm float-right"><i class="fas fa-trash-alt"></i></a>
                                            </span>
                                        </div>
                                        <input hidden id="SubCategoryIcon" name="SubCategoryIcon" value="@Model.SubCategory?.SubCategoryIcon" />
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <!-- /.card-body -->
                    <div class="card-footer">
                        <button type="submit" id="btn_create_save" class="btn btn-success">@(string.IsNullOrEmpty(Model.SubCategory?.SubCategoryId) ? "Create":"Update")</button>
                        <a asp-page='./EditCategory' asp-page-handler="Find" asp-route-categoryId="@Model.Category.CategoryId" class="btn btn-danger">Reset</a>
                        <a asp-page='./CreateCategory' class="btn btn-primary">Back</a>
                    </div>
                </div>
                <!-- /.CARD TABLE-->
            </form>

            <!-- CARD TABLE-->
            <div class="card"
                <!-- card-header -->
                <div class="card-header">
                    <h3 class="card-title">List category level 2</h3>
                    <div class="card-tools">
                        @*<button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                            <button type="button" class="btn btn-tool" data-card-widget="remove"><i class="fas fa-times"></i></button>*@
                    </div>
                </div>
                <!-- /.card-header -->
                <!-- card-body -->
                <div class="card-body" style="overflow: auto;">
                    <table id="id_table_category_level_2" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>SubCategoryId</th>
                                <th>SubCategoryName</th>
                                <th>SubCategoryLevel</th>
                                <th>SubCategoryIcon</th>
                                <th>Type</th>
                                <th>Updated</th>
                                <th>Edit</th>
                            </tr>
                        </thead>

                        <tbody>
                        </tbody>
                    </table>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.CARD TABLE-->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->
    <!-- modal -->
    <div class="modal fade" id="deleteModal">
        <div class="modal-dialog">
            <div class="modal-content bg-danger">
                <div class="modal-header">
                    <h4 class="modal-title">Delete</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete?&hellip;</p>
                </div>
                <div class="modal-footer justify-content-between">
                    <button type="button" class="btn btn-outline-light" data-dismiss="modal">Close</button>
                    <button id="deleteConfirm" type="button" class="btn btn-outline-light">Save change</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
    <!-- /.modal -->
</section>
<!-- /.Main content -->
@section Scripts {
<partial name="_ValidationScriptsPartial" />
<!-- DataTables -->
<script src="~/lib/plugins/datatables/jquery.dataTables.js"></script>
<script src="~/lib/plugins/datatables-bs4/js/dataTables.bootstrap4.js"></script>
<!-- SweetAlert2 -->
<script src="~/lib/plugins/sweetalert2/sweetalert2.min.js"></script>
<!-- Toastr -->
<script src="~/lib/plugins/toastr/toastr.min.js"></script>
<!-- bs-custom-file-input -->
<script src="~/lib/plugins/bs-custom-file-input/bs-custom-file-input.min.js"></script>
<script src="~/lib/uploadfile/jquery.form.js"></script>
<script src="~/lib/uploadfile/jquery.uploadfile.min.js"></script>
<script>
    $(function () {

        bsCustomFileInput.init();
        $("select").each((index,item)=>{
            if($(item).attr("value")){
                    $(item).val($(item).attr("value")).change();
            }
        });
        @*
                                                            Pipelining function for DataTables. To be used to the `ajax` option of DataTables
                                                            https://datatables.net/examples/server_side/pipeline.html
        *@
        $.fn.dataTable.pipeline = function (opts) {
            @*Configuration options*@
            var conf = $.extend({
                pages: 5,     @*number of pages to cache*@
                url: '',      @*script url*@
                data: null,   @*function or object with parameters to send to the server*@
                @*matching how `ajax.data` works in DataTables*@
                method: 'GET' @*Ajax HTTP method*@
            }, opts);

            @*Private variables for storing the cache*@
            var cacheLower = -1;
            var cacheUpper = null;
            var cacheLastRequest = null;
            var cacheLastJson = null;

            return function (request, drawCallback, settings) {
                var ajax = false;
                var requestStart = request.start;
                var drawStart = request.start;
                var requestLength = request.length;
                var requestEnd = requestStart + requestLength;

                if (settings.clearCache) {
                    @*API requested that the cache be cleared*@
                    ajax = true;
                    settings.clearCache = false;
                }
                else if (cacheLower < 0 || requestStart < cacheLower || requestEnd > cacheUpper) {
                    @*outside cached data - need to make a request*@
                    ajax = true;
                }
                else if (JSON.stringify(request.order) !== JSON.stringify(cacheLastRequest.order) ||
                    JSON.stringify(request.columns) !== JSON.stringify(cacheLastRequest.columns) ||
                    JSON.stringify(request.search) !== JSON.stringify(cacheLastRequest.search)
                ) {
                    @*properties changed (ordering, columns, searching)*@
                    ajax = true;
                }

                @*Store the request for checking next time around*@
                cacheLastRequest = $.extend(true, {}, request);
                    if(request.order && request.order[0].column) {
                        let order = request.columns[request.order[0].column].data;
                        order = order.replace(/\b[a-z]/g, function(letter) {
                            return letter.toUpperCase();
                        });
                        request.order[0].column = order
                    } else {
                        request.order = undefined;
                    }
                    request.columns = undefined;

                if (ajax) {
                    @*Need data from the server*@
                    if (requestStart < cacheLower) {
                        requestStart = requestStart - (requestLength * (conf.pages - 1));

                        if (requestStart < 0) {
                            requestStart = 0;
                        }
                    }

                    cacheLower = requestStart;
                    cacheUpper = requestStart + (requestLength * conf.pages);

                    request.start = requestStart;
                    request.length = requestLength * conf.pages;

                    @*Provide the same `data` options as DataTables*@
                    if (typeof conf.data === 'function') {
                        @*As a function it is executed with the data object as an arg
                                                                        for manipulation. If an object is returned, it is used as the
                                                                        data object to submit*@
                        var d = conf.data(request);
                        if (d) {
                            $.extend(request, d);
                        }
                    }
                    else if ($.isPlainObject(conf.data)) {
                        @*As an object, the data given extends the default*@
                        $.extend(request, conf.data);
                    }

                    return $.ajax({
                        "type": conf.method,
                        "url": conf.url,
                        "data": request,
                        "dataType": "json",
                        "cache": false,
                        "success": function (json) {
                            cacheLastJson = $.extend(true, {}, json);

                            if (cacheLower != drawStart) {
                                json.data.splice(0, drawStart - cacheLower);
                            }
                            if (requestLength >= -1 && json.data) {
                                json.data.splice(requestLength, json.data.length);
                            }

                            drawCallback(json);
                        }
                    });
                }
                else
                {
                    json = $.extend(true, {}, cacheLastJson);
                    json.draw = request.draw; @*Update the echo for each response*@
                    json.data.splice(0, requestStart - cacheLower);
                    json.data.splice(requestLength, json.data.length);

                    drawCallback(json);
                }
            }
        };

        @*Register an API method that will empty the pipelined data, forcing an Ajax
                                                        fetch on the next draw (i.e. `table.clearPipeline().draw()`)*@
        $.fn.dataTable.Api.register('clearPipeline()', function () {
            return this.iterator('table', function (settings) {
                settings.clearCache = true;
            });
        });


        @*DataTables initialisation*@
        $(document).ready(function () {
            var table = $('#id_table_category_level_2').DataTable({
                "paging": true,
                "lengthChange": true,
                "searching": true,
                "ordering": true,
                "info": true,
                "autoWidth": true,
                "processing": true,
                "serverSide": true,
                "columns": [
                    { "data": "subCategoryId", "orderable": true, "width": "20%" },
                    { "data": "subCategoryName", "orderable": true, "width": "20%" },
                    { "data": "subCategoryLevel", "orderable": true, "width": "10%" },
                    {
                        "data": "subCategoryIcon",
                        "render": function (data, type, row, meta) {
                            @*return '<img src="Content/' + row.avatar + '">';*@
                            return '<img src="' + row.subCategoryIcon + '" width="50px" height="50px">';
                        }
                    },
                    { "data": "type", "orderable": true, "width": "10%" },
                    { "orderable": false,"data": "updated" },
                    {"orderable": false,
                        "data": "button",
                        "width": "20%",
                        "render": function (data, type, row, meta) {
                            return "<a href='#' class='btn btn-danger btn-hidden' onclick = DeleteData(this); style='margin-left: 5px;'>Delete</a>";
                        }
                    }
                ],
                "ajax": $.fn.dataTable.pipeline({
                    url: '?handler=List&categoryId=@Model.Category.CategoryId',
                    pages: 1 // number of pages to cache
                }),
            });

            @*color selected*@
            $('#id_table_category_level_2 tbody').on('click', 'tr', function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                }
                else
                {
                    table.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
                var $row = $(this);
                var subCategoryId = $row.find("td:nth-child(1)").text();
                var subCategoryName = $row.find("td:nth-child(2)").text();
                var subCategoryLevel = $row.find("td:nth-child(3)").text();
                var subCategoryIcon = $row.find("td:nth-child(4)").find('img').attr("src");
                var type = $row.find("td:nth-child(5)").text();

                document.getElementById("SubCategoryId").value = subCategoryId;
                document.getElementById("Type").value = type;
                document.getElementById("SubCategoryName").value = subCategoryName;
                document.getElementById("SubCategoryLevel").value = subCategoryLevel;
                document.getElementById("SubCategoryIcon").value = subCategoryIcon;
                $('#SubCategoryIconLabel').attr('src',subCategoryIcon);
                document.getElementById("btn_create_save").innerHTML = 'Save';
            });

        });
    });

    function EditData(btnedit) {
        var $row = $(btnedit).parent().parent();
        var subCategoryId = $row.find("td:nth-child(1)").text();

        window.location.href = '/Admin/ShopPage/Category/EditCategory?categoryId=' + subCategoryId;
    }

    function DeleteData(btndelete) {
        var $row = $(btndelete).parent().parent();
        var subCategoryId = $row.find("td:nth-child(1)").text();
        console.log(subCategoryId);

        $('#deleteModal').modal('show');
        $('#deleteConfirm').click(function (e) {
            $('#deleteModal').modal('hide');
            window.location.href = '/Admin/ShopPage/Category/EditCategory?handler=Delete&categoryId=@Model.Category.CategoryId&subCategoryId=' + subCategoryId;
        });
    }
    function _onDelete(index, el) {
        var myFileUpload = document.getElementById("myFileUpload");
        var files = myFileUpload.files;

        @*remove file at index*@
        var fileBuffer = [];
        Array.prototype.push.apply(fileBuffer, files);
        fileBuffer.splice(index, 1);
        const dT = new ClipboardEvent('').clipboardData || new DataTransfer();
        for (let file of fileBuffer) { dT.items.add(file); }
        myFileUpload.files = dT.files;

        files = myFileUpload.files;
        console.log(files);
        $(".image_" + index).remove()
    };

    $(function () {
        @*Add text editor*@
        @* myFileUpload *@
        function readURL() {
            var $input = $(this);
            var showMyFileUpload = document.getElementById("show-myFileUpload");
            while (showMyFileUpload.firstChild) showMyFileUpload.removeChild(showMyFileUpload.firstChild);

            for (let i = 0; i < this.files.length; i++) {
                var file = this.files[i];
                console.log(file);
                var fileName = file.name;
                var fileSize = (file.size / 1024).toFixed(2);
                var fileType = file.type;

                var reader = new FileReader();
                reader.onload = function (e) {
                    @*console.log(e.target);*@
                    var li = document.createElement('li');
                    li.className = 'image_' + i;
                    li.innerHTML = '<span class="mailbox-attachment-icon has-img"><img src="' + e.target.result + '" alt="Attachment"></span>\
                        <div class="mailbox-attachment-info">\
                            <a href="#" class="mailbox-attachment-name"><i class="fas fa-camera"></i> ' + fileName + '</a>\
                            <span class="mailbox-attachment-size clearfix mt-1">\
                                <span>' + fileSize + ' KB</span>\
                                <a href="javascript:_onDelete('+ i +', this)" class="btn btn-default btn-sm float-right"><i class="fas fa-trash-alt"></i></a>\
                            </span>\
                        </div>';
                    showMyFileUpload.appendChild(li);
                }
                reader.readAsDataURL(file);
            }
        };
        $("#myFileUpload").change(readURL);
        @*libFileUpload*@
        var count = 0;
        $("#fileuploader").uploadFile({
            url: "#",
            returnType: "json",
            multiple: true,
            dragDrop: false,
            fileName: "Attachment",
            statusBarWidth: 600,
            dragdropWidth: 600,
            maxFileCount: 2,
            maxFileSize: 1000 * 1024,
            showPreview: true,
            previewHeight: "100px",
            previewWidth: "100px",
            showDelete: true,
            showDownload: true,
            showFileSize: true,
            allowTypes: "jpg,png,gif",
            acceptFiles: "image/*",
            autoSubmit: false,
            extraHTML: function () {
                var html = "<div>";
                @*html    += "<b>File tags:</b><input type='text' name='tags' value='' /> <br/>";*@
                html    += "</div>";
                return html;
            },
            customProgressBar: function (obj, s) {
                this.statusbar = $("<div class='ajax-file-upload-statusbar'></div>");
                this.preview = $("<img class='ajax-file-upload-preview' />").width(s.previewWidth).height(s.previewHeight).appendTo(this.statusbar).hide();
                this.filename = $("<div class='ajax-file-upload-filename'></div>").appendTo(this.statusbar);
                this.progressDiv = $("<div class='ajax-file-upload-progress'>").appendTo(this.statusbar).hide();
                this.progressbar = $("<div class='ajax-file-upload-bar'></div>").appendTo(this.progressDiv);
                this.abort = $("<div>" + s.abortStr + "</div>").appendTo(this.statusbar).hide();
                this.cancel = $("<div>" + s.cancelStr + "</div>").appendTo(this.statusbar).hide();
                this.done = $("<div>" + s.doneStr + "</div>").appendTo(this.statusbar).hide();
                this.download = $("<div>" + s.downloadStr + "</div>").appendTo(this.statusbar).hide();
                this.del = $("<div>" + s.deleteStr + "</div>").appendTo(this.statusbar).hide();

                this.abort.addClass("custom-red btn btn-danger");
                this.done.addClass("custom-green btn btn-success");
                this.download.addClass("custom-green btn btn-success");
                this.cancel.addClass("custom-red btn btn-danger");
                this.del.addClass("custom-red btn btn-danger");

                if (count++ % 2 == 0)
                    this.statusbar.addClass("even");
                else
                    this.statusbar.addClass("odd");
                return this;
            },
            onLoad: function (obj) {
                console.log("onLoad Widget Loaded");
            },
            onSelect: function (files) {
                for (let i = 0; i < files.length; i++) {
                    var file = files[i];
                    console.log("onSelect " + file.name + " (" + file.size + ")");
                }
                return true;
            },
            onSubmit: function (files) {
                console.log("onSubmit Submitting:" + JSON.stringify(files));
            },
            onSuccess: function (files, data, xhr, pd) {
                console.log("onSuccess Success for: " + JSON.stringify(data));
            },
            afterUploadAll: function (obj) {
                console.log("afterUploadAll All files are uploaded");
            },
            onError: function (files, status, errMsg, pd) {
                console.log("onError Error for: " + JSON.stringify(files));
            },
            onCancel: function (files, pd) {
                console.log("onCancel Canceled files: " + JSON.stringify(files));
            },
            deleteCallback: function (data, pd) {
                @*for (var i = 0; i < data.length; i++) {
                    $.post("delete.php", { op: "delete", name: data[i] },
                        function (resp, textStatus, jqXHR) {
                            alert("File Deleted");
                        });
                }
                pd.statusbar.hide();*@
            },
            downloadCallback: function (filename, pd) {
                @*location.href = "download.php?filename=" + filename;*@
            },
            dragDropStr: "<span><b>Drag and drop files</b></span>",
            abortStr: "Abort",
            cancelStr: "Cancel",
            doneStr: "Done",
            multiDragErrorStr: "Multiple File Drag & Drop is not allowed.",
            extErrorStr: "is not allowed. Allowed extensions:",
            sizeErrorStr: "is not allowed. Allowed Max size:",
            dupateErrorStr: "is not allowed. File already exists.",
            maxFileCountErrorStr: "is not allowed. Maximum allowed files are:",
            uploadErrorStr: "Upload is not allowed",
            uploadStr: '<div class="form"><div class="btn btn-default btn-file"><i class="fas fa-paperclip"></i>Attachment</div></div>',
        });

    })
</script>
}