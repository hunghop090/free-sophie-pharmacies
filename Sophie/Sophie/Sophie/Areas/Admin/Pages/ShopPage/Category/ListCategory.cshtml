@page
@using Sophie.Areas.Admin.ShopPage
@using Sophie.Resource.Entities.Shop
@using Sophie.Units

@model Sophie.Areas.Admin.ShopPage.ListCategoryModel
@{
    ViewData["Title"] = "List Category Page";
    ViewData["NameActivePage"] = NavigationPages.List_Category_Product;
}

@section Styles {
<style>
    .selected {
        background-color: #cff4d6 !important;
    }

    table.dataTable td.dt-control:before {
        height: 1em;
        width: 1em;
        margin-top: -9px;
        display: inline-block;
        color: white;
        border: 0.15em solid white;
        border-radius: 1em;
        box-shadow: 0 0 0.2em #444;
        box-sizing: content-box;
        text-align: center;
        text-indent: 0 !important;
        font-family: "Courier New",Courier,monospace;
        line-height: 1em;
        content: "+";
        background-color: #31b131;
    }

    table.dataTable tr.shown td.dt-control:before {
        content: "-";
        background-color: #d33333;
    }

    .table-hover tr.no-hover {
        background-color: unset !important;
    }
</style>
<!-- DataTables -->
<link rel="stylesheet" href="~/lib/plugins/datatables-bs4/css/dataTables.bootstrap4.css">
<!-- Ionicons -->
<link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
<!-- SweetAlert2 -->
<link rel="stylesheet" href="~/lib/plugins/sweetalert2-theme-bootstrap-4/bootstrap-4.min.css">
<!-- Toastr -->
<link rel="stylesheet" href="~/lib/plugins/toastr/toastr.min.css">

}
@await Html.PartialAsync("~/Areas/Admin/Shared/_StatusMessage.cshtml", Model.StatusMessage)

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0 text-dark">@ViewData["Title"]</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item"><a href="#">Product</a></li>
                    <li class="breadcrumb-item active">@ViewData["Title"]</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.Content Header -->
<!-- Main content -->
<div class="card">
    <!-- card-header -->
    <div class="card-header">
        <h3 class="card-title">List category level 1</h3>
        <div class="card-tools">
            @*<button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                <button type="button" class="btn btn-tool" data-card-widget="remove"><i class="fas fa-times"></i></button>*@
        </div>
    </div>
    <!-- /.card-header -->
    <!-- card-body -->
    <div class="card-body" style="overflow: auto;">
        <table id="id_table_category_level_1" class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th></th>
                    <th>CategoryId</th>
                    <th>CategoryName</th>
                    <th>CategoryLevel</th>
                    <th>CategoryIcon</th>
                    <th>Type</th>
                    <th>Updated</th>
                    <th>Edit</th>
                </tr>
            </thead>
        </table>
    </div>
    <!-- /.card-body -->
</div>

<div class="modal fade" id="deleteModal">
    <div class="modal-dialog">
        <div class="modal-content bg-danger">
            <div class="modal-header">
                <h4 class="modal-title">Delete</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete?&hellip;</p>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-outline-light" data-dismiss="modal">Close</button>
                <button id="deleteConfirm" type="button" class="btn btn-outline-light">Save change</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.Main content -->
@section Scripts {
<partial name="_ValidationScriptsPartial" />
<!-- DataTables -->
<script src="~/lib/plugins/datatables/jquery.dataTables.js"></script>
<script src="~/lib/plugins/datatables-bs4/js/dataTables.bootstrap4.js"></script>
<!-- SweetAlert2 -->
<script src="~/lib/plugins/sweetalert2/sweetalert2.min.js"></script>
<!-- Toastr -->
<script src="~/lib/plugins/toastr/toastr.min.js"></script>
<!-- bs-custom-file-input -->
<script src="~/lib/plugins/bs-custom-file-input/bs-custom-file-input.min.js"></script>

<script>
        $(function () {
             bsCustomFileInput.init();

             @*
                                                                                                                                                             Pipelining function for DataTables. To be used to the `ajax` option of DataTables
                                                                                                                                                             https://datatables.net/examples/server_side/pipeline.html
             *@
             $.fn.dataTable.pipeline = function (opts) {
                 @*Configuration options*@
                 var conf = $.extend({
                     pages: 5,     @*number of pages to cache*@
                     url: '',      @*script url*@
                     data: null,   @*function or object with parameters to send to the server*@
                     @*matching how `ajax.data` works in DataTables*@
                     method: 'GET' @*Ajax HTTP method*@
                 }, opts);

                 @*Private variables for storing the cache*@
                 var cacheLower = -1;
                 var cacheUpper = null;
                 var cacheLastRequest = null;
                 var cacheLastJson = null;

                 return function (request, drawCallback, settings) {
                     var ajax = false;
                     var requestStart = request.start;
                     var drawStart = request.start;
                     var requestLength = request.length;
                     var requestEnd = requestStart + requestLength;

                     if (settings.clearCache) {
                         @*API requested that the cache be cleared*@
                         ajax = true;
                         settings.clearCache = false;
                     }
                     else if (cacheLower < 0 || requestStart < cacheLower || requestEnd > cacheUpper) {
                         @*outside cached data - need to make a request*@
                         ajax = true;
                     }
                     else if (JSON.stringify(request.order) !== JSON.stringify(cacheLastRequest.order) ||

                         JSON.stringify(request.search) !== JSON.stringify(cacheLastRequest.search)
                     ) {
                         @*properties changed (ordering, columns, searching)*@
                         ajax = true;
                     }

                     @*Store the request for checking next time around*@
                     cacheLastRequest = $.extend(true, {}, request);
                    if(request.order && request.order[0].column) {
                        let order = request.columns[request.order[0].column].data;
                        order = order.replace(/\b[a-z]/g, function(letter) {
                            return letter.toUpperCase();
                        });
                        request.order[0].column = order
                    } else {
                        request.order = undefined;
                    }
                       request.columns = undefined;
                     if (ajax) {
                         @*Need data from the server*@
                         if (requestStart < cacheLower) {
                             requestStart = requestStart - (requestLength * (conf.pages - 1));
                             if (requestStart < 0) {
                                 requestStart = 0;
                             }
                         }

                         cacheLower = requestStart;
                         cacheUpper = requestStart + (requestLength * conf.pages);

                         request.start = requestStart;
                         request.length = requestLength * conf.pages;

                         @*Provide the same `data` options as DataTables*@
                         if (typeof conf.data === 'function') {
                             @*As a function it is executed with the data object as an arg
                                                                                                                                                                         for manipulation. If an object is returned, it is used as the
                                                                                                                                                                         data object to submit*@
                             var d = conf.data(request);
                             if (d) {
                                 $.extend(request, d);
                             }
                         }
                         else if ($.isPlainObject(conf.data)) {
                             @*As an object, the data given extends the default*@
                             $.extend(request, conf.data);
                         }

                         return $.ajax({
                             "type": conf.method,
                             "url": conf.url,
                             "data": request,
                             "dataType": "json",
                             "cache": false,
                             "success": function (json) {
                                 cacheLastJson = $.extend(true, {}, json);

                                 if (cacheLower != drawStart) {
                                     json.data.splice(0, drawStart - cacheLower);
                                 }
                                 if (requestLength > -1) {
                                     json.data.splice(requestLength, json.data.length);
                                 }

                                 drawCallback(json);
                             }
                         });
                     }
                     else
                     {
                         json = $.extend(true, {}, cacheLastJson);
                         json.draw = request.draw; @*Update the echo for each response*@
                         json.data.splice(0, requestStart - cacheLower);
                         json.data.splice(requestLength, json.data.length);

                         drawCallback(json);
                     }
                 }
             };

             @*Register an API method that will empty the pipelined data, forcing an Ajax
                                                                                                                                                         fetch on the next draw (i.e. `table.clearPipeline().draw()`)*@
             $.fn.dataTable.Api.register('clearPipeline()', function () {
                 return this.iterator('table', function (settings) {
                     settings.clearCache = true;
                 });
             });

             function format ( d ) {
                 console.log(d)
        // `d` is the original data object for the row
        let htmlRow = ''
        d.listSubCategory.forEach((item) => {
            htmlRow += `<tr>
            <td>${item.subCategoryId}</td>
            <td>${item.subCategoryName}</td>
            <td>${item.subCategoryLevel}</td>
            <td>${item.subCategoryIcon}</td>
            <td>${item.type}</td>
            <td>${item.updated}</td>
            <td><a href='#' class='btn btn-info' onclick = EditSubData('${item.subCategoryId}','${d.categoryId}'); >Edit</a><a href='#' class='btn btn-danger btn-hidden' onclick = DeleteSubData('${item.subCategoryId}','${d.categoryId}'); style='margin-left: 5px;'>Delete</a></td>
            <tr>
        `
        })
        return `<table class="table table-bordered table-hover" >
                <tr>
                    <th>CategoryId</th>
                    <th>CategoryName</th>
                    <th>CategoryLevel</th>
                    <th>CategoryIcon</th>
                    <th>Type</th>
                    <th>Updated</th>
                    <th>Edit</th>
                </tr>
                ${htmlRow}
                </table>`;
    }


             @*DataTables initialisation*@
             $(document).ready(function () {
                 var table = $('#id_table_category_level_1').DataTable({
                     "paging":   false,
                     "lengthChange": true,
                     "searching": true,
                     "ordering": true,
                     "info": true,
                     "autoWidth": true,
                     "processing": true,
                     "serverSide": true,
                     "columns": [
                         {"className":'dt-control',"orderable":false,"data":null,"defaultContent": ''},
                         { "data": "categoryId", "orderable": true, "width": "20%" },
                         { "data": "categoryName", "orderable": true, "width": "20%" },
                         { "data": "categoryLevel", "orderable": true, "width": "10%" },
                         {
                             "data": "categoryIcon",
                             "render": function (data, type, row, meta) {
                                 @*return '<img src="Content/' + row.avatar + '">';*@
                                 return '<img src="' + row.categoryIcon + '" width="50px" height="50px">';
                             }
                         },
                         { "data": "type", "orderable": true, "width": "10%" },
                         { "orderable": false,"data": "updated" },
                         {"orderable": false,
                             "data": "button",
                             "width": "20%",
                             "render": function (data, type, row, meta) {
                                 return "<a href='#' class='btn btn-info' onclick = EditData(this); >Edit</a><a href='#' class='btn btn-danger btn-hidden' onclick = DeleteData(this); style='margin-left: 5px;'>Delete</a>";
                             }
                         }
                     ],
                     "ajax": $.fn.dataTable.pipeline({
                         url: '?handler=List',
                     }),
                 });

                 @*color selected*@
                 $('#id_table_category_level_1 tbody').on('click', 'tr', function () {
                     if ($(this).hasClass('selected')) {
                         $(this).removeClass('selected');
                     }
                     else
                     {
                         table.$('tr.selected').removeClass('selected');
                         $(this).addClass('selected');
                     }
                     var $row = $(this);
                     var categoryId = $row.find("td:nth-child(1)").text();
                     var categoryName = $row.find("td:nth-child(2)").text();
                     var categoryLevel = $row.find("td:nth-child(3)").text();
                     var categoryIcon = $row.find("td:nth-child(4)").find('img').attr("src");
                     var type = $row.find("td:nth-child(5)").text();

                     document.getElementById("CategoryId").value = categoryId;
                     document.getElementById("Type").value = type;
                     document.getElementById("CategoryName").value = categoryName;
                     document.getElementById("CategoryLevel").value = categoryLevel;
                     document.getElementById("CategoryIcon").value = categoryIcon;
                     document.getElementById("CategoryIconLabel").value = categoryIcon;
                     document.getElementById("btn_create_save").innerHTML = 'Save';
                 });

                  // Add event listener for opening and closing details
                $('#id_table_category_level_1 tbody').on('click', 'td.dt-control', function () {
                    var tr = $(this).closest('tr');
                    var row = table.row( tr );

                    if ( row.child.isShown() ) {
                        // This row is already open - close it
                        row.child.hide();
                        tr.removeClass('shown');
                    }
                    else {
                        row.child( format(row.data()),"no-hover" ).show();
                        tr.addClass('shown');
                    }
                });
             });

         });

         function EditData(btnedit) {
             var $row = $(btnedit).parent().parent();
             var categoryId = $row.find("td:nth-child(2)").text();

             window.location.href = '/Admin/ShopPage/Category/CreateCategory?handler=Find&categoryId=' + categoryId;
         }

         function DeleteData(btndelete) {
             var $row = $(btndelete).parent().parent();
             var categoryId = $row.find("td:nth-child(2)").text();

             $('#deleteModal').modal('show');
             $('#deleteConfirm').click(function (e) {
                 $('#deleteModal').modal('hide');
                 window.location.href = '/Admin/ShopPage/Category/CreateCategory?handler=Delete&categoryId=' + categoryId;
             });
         }
          function EditSubData(subCategoryId,categoryId) {
             window.location.href = `/Admin/ShopPage/Category/EditCategory?handler=Find&categoryId=${categoryId}&subCategoryId=${subCategoryId}`;
         }

         function DeleteSubData(subCategoryId,categoryId) {
             $('#deleteModal').modal('show');
             $('#deleteConfirm').click(function (e) {
                 $('#deleteModal').modal('hide');
                 window.location.href = `/Admin/ShopPage/Category/CreateCategory?handler=Delete&categoryId=${categoryId}&subCategoryId=${subCategoryId}`;
             });
         }
</script>
}